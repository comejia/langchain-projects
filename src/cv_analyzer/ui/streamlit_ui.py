import streamlit as st
from models.cv_model import CVAnalyzer
from services.pdf_processor import pdf_to_text
from services.cv_evaluator import evaluate_candidate


def main():
    """Funci√≥n principal que define la interfaz de usuario de Streamlit"""

    st.set_page_config(
        page_title="Sistema de Evaluaci√≥n de CVs",
        page_icon="üìÑ",
        layout="wide",
        initial_sidebar_state="expanded",
    )

    st.title("üìÑ Sistema de Evaluaci√≥n de CVs con IA")
    st.markdown("""
    **Analiza curr√≠culums y eval√∫a candidatos de manera objetiva usando IA**
    
    Este sistema utiliza inteligencia artificial para:
    - Extraer informaci√≥n clave de curr√≠culums en PDF
    - Analizar la experiencia y habilidades del candidato
    - Evaluar el ajuste al puesto espec√≠fico
    - Proporcionar recomendaciones objetivas de contrataci√≥n
    """)

    st.divider()

    col_entrada, col_resultado = st.columns([1, 1], gap="large")

    with col_entrada:
        procesar_entrada()

    with col_resultado:
        mostrar_area_resultados()


def procesar_entrada():
    """Maneja la entrada de datos del usuario"""

    st.header("üìã Datos de Entrada")

    archivo_cv = st.file_uploader(
        "**1. Sube el CV del candidato (PDF)**",
        type=["pdf"],
        help="Selecciona un archivo PDF que contenga el curr√≠culum a evaluar. Aseg√∫rate de que el texto sea legible y no est√© en formato de imagen.",
    )

    if archivo_cv is not None:
        st.success(f"‚úÖ Archivo cargado: {archivo_cv.name}")
        st.info(f"üìä Tama√±o: {archivo_cv.size:,} bytes")

    st.markdown("---")

    st.markdown("**2. Descripci√≥n del puesto de trabajo**")
    descripcion_puesto = st.text_area(
        "Detalla los requisitos, responsabilidades y habilidades necesarias:",
        height=250,
        placeholder="""Ejemplo detallado:

**Puesto:** Desarrollador Frontend Senior

**Requisitos obligatorios:**
- 3+ a√±os de experiencia en desarrollo frontend
- Dominio de React.js y JavaScript/TypeScript
- Experiencia con HTML5, CSS3 y frameworks CSS (Bootstrap, Tailwind)
- Conocimiento de herramientas de build (Webpack, Vite)

**Requisitos deseables:**
- Experiencia con Next.js o similares
- Conocimientos de testing (Jest, Cypress)
- Familiaridad con metodolog√≠as √°giles
- Ingl√©s intermedio-avanzado

**Responsabilidades:**
- Desarrollo de interfaces de usuario responsivas
- Colaboraci√≥n con equipos de dise√±o y backend
- Optimizaci√≥n de rendimiento de aplicaciones web
- Mantenimiento de c√≥digo legacy""",
        help="S√© espec√≠fico sobre requisitos t√©cnicos, experiencia requerida y responsabilidades del puesto.",
    )

    st.markdown("---")

    col_btn1, col_btn2 = st.columns([1, 1])

    with col_btn1:
        analizar = st.button(
            "üîç Analizar Candidato", type="primary", use_container_width=True
        )

    with col_btn2:
        if st.button("üóëÔ∏è Limpiar", use_container_width=True):
            st.rerun()

    st.session_state["archivo_cv"] = archivo_cv
    st.session_state["descripcion_puesto"] = descripcion_puesto
    st.session_state["analizar"] = analizar


def mostrar_area_resultados():
    """Muestra el √°rea de resultados del an√°lisis"""

    st.header("üìä Resultado del An√°lisis")

    if st.session_state.get("analizar", False):
        archivo_cv = st.session_state.get("archivo_cv")
        descripcion_puesto = st.session_state.get("descripcion_puesto", "").strip()

        if archivo_cv is None:
            st.error("‚ö†Ô∏è Por favor sube un archivo PDF con el curr√≠culum")
            return

        if not descripcion_puesto:
            st.error("‚ö†Ô∏è Por favor proporciona una descripci√≥n detallada del puesto")
            return

        procesar_analisis(archivo_cv, descripcion_puesto)
    else:
        st.info("""
        üëÜ **Instrucciones:**
        
        1. Sube un CV en formato PDF en la columna izquierda
        2. Describe detalladamente el puesto de trabajo
        3. Haz clic en "Analizar Candidato"
        4. Aqu√≠ aparecer√° el an√°lisis completo del candidato
        
        **Consejos para mejores resultados:**
        - Usa CVs con texto seleccionable (no im√°genes escaneadas)
        - S√© espec√≠fico en la descripci√≥n del puesto
        - Incluye tanto requisitos obligatorios como deseables
        """)


def procesar_analisis(archivo_cv, descripcion_puesto):
    """Procesa el an√°lisis completo del CV"""

    with st.spinner("üîÑ Procesando curr√≠culum..."):
        progress_bar = st.progress(0)
        status_text = st.empty()

        status_text.text("üìÑ Extrayendo texto del PDF...")
        progress_bar.progress(25)

        texto_cv = pdf_to_text(archivo_cv)

        if texto_cv.startswith("Error"):
            st.error(f"‚ùå {texto_cv}")
            return

        status_text.text("ü§ñ Preparando an√°lisis con IA...")
        progress_bar.progress(50)

        status_text.text("üìä Analizando candidato...")
        progress_bar.progress(75)

        resultado = evaluate_candidate(texto_cv, descripcion_puesto)

        status_text.text("‚úÖ An√°lisis completado")
        progress_bar.progress(100)

        progress_bar.empty()
        status_text.empty()

        mostrar_resultados(resultado)


def mostrar_resultados(resultado: CVAnalyzer):
    """Muestra los resultados del an√°lisis de manera estructurada y profesional"""

    st.subheader("üéØ Evaluaci√≥n Principal")

    if resultado.adjustment_percentage >= 80:
        color = "üü¢"
        nivel = "EXCELENTE"
        mensaje = "Candidato altamente recomendado"
    elif resultado.adjustment_percentage >= 60:
        color = "üü°"
        nivel = "BUENO"
        mensaje = "Candidato recomendado con reservas"
    elif resultado.adjustment_percentage >= 40:
        color = "üü†"
        nivel = "REGULAR"
        mensaje = "Candidato requiere evaluaci√≥n adicional"
    else:
        color = "üî¥"
        nivel = "BAJO"
        mensaje = "Candidato no recomendado"

    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.metric(
            label="Porcentaje de Ajuste al Puesto",
            value=f"{resultado.adjustment_percentage}%",
            delta=f"{color} {nivel}",
        )
        st.markdown(f"**{mensaje}**")

    st.divider()

    st.subheader("üë§ Perfil del Candidato")

    col1, col2 = st.columns(2)
    with col1:
        st.info(f"**üë®‚Äçüíº Nombre:** {resultado.name}")
        st.info(f"**‚è±Ô∏è Experiencia:** {resultado.experience_year} a√±os")

    with col2:
        st.info(f"**üéì Educaci√≥n:** {resultado.education}")

    st.subheader("üíº Experiencia Relevante")
    st.info(f"üìã **Resumen de experiencia:**\n\n{resultado.experience_key}")

    st.divider()

    st.subheader("üõ†Ô∏è Habilidades T√©cnicas Clave")
    if resultado.skills:
        cols = st.columns(min(len(resultado.skills), 4))
        for i, habilidad in enumerate(resultado.skills):
            with cols[i % 4]:
                st.success(f"‚úÖ {habilidad}")
    else:
        st.warning("No se identificaron habilidades t√©cnicas espec√≠ficas")

    st.divider()

    col_fortalezas, col_mejoras = st.columns(2)

    with col_fortalezas:
        st.subheader("üí™ Fortalezas Principales")
        if resultado.strengths:
            for i, fortaleza in enumerate(resultado.strengths, 1):
                st.markdown(f"**{i}.** {fortaleza}")
        else:
            st.info("No se identificaron fortalezas espec√≠ficas")

    with col_mejoras:
        st.subheader("üìà √Åreas de Desarrollo")
        if resultado.weaknesses:
            for i, area in enumerate(resultado.weaknesses, 1):
                st.markdown(f"**{i}.** {area}")
        else:
            st.info("No se identificaron √°reas de mejora espec√≠ficas")

    st.divider()

    st.subheader("üìã Recomendaci√≥n Final")

    if resultado.adjustment_percentage >= 70:
        st.success("""
        ‚úÖ **CANDIDATO RECOMENDADO**
        
        El perfil del candidato est√° bien alineado con los requisitos del puesto. 
        Se recomienda proceder con las siguientes etapas del proceso de selecci√≥n.
        """)
    elif resultado.adjustment_percentage >= 50:
        st.warning("""
        ‚ö†Ô∏è **CANDIDATO CON POTENCIAL**
        
        El candidato muestra potencial pero requiere evaluaci√≥n adicional. 
        Se recomienda una entrevista t√©cnica para validar competencias espec√≠ficas.
        """)
    else:
        st.error("""
        ‚ùå **CANDIDATO NO RECOMENDADO**
        
        El perfil no se alinea suficientemente con los requisitos del puesto. 
        Se recomienda continuar la b√∫squeda de candidatos m√°s adecuados.
        """)

    st.markdown("---")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üíæ Guardar An√°lisis", use_container_width=True):
            st.info("Funcionalidad de guardado - En desarrollo")
